From simuliris Require Import
  prelude.
From simuliris.common Require Export
  fin_maps.
From simuliris.lambda_lang Require Export
  syntax.
From simuliris.lambda_lang Require Import
  notations.

Implicit Types func func_dps : lambda_function.
Implicit Types v v‚Çõ v‚Çú : lambda_val.
Implicit Types e e‚Çõ e‚Çú : lambda_expr.
Implicit Types prog prog‚Çõ prog‚Çú : lambda_program.
Implicit Types Œæ : gmap lambda_function lambda_function.

Inductive tmc_dir Œæ : lambda_expr ‚Üí lambda_expr ‚Üí Prop :=
  | tmc_dir_val v :
      tmc_dir Œæ
        #v
        #v
  | tmc_dir_var x :
      tmc_dir Œæ
        $x
        $x
  | tmc_dir_let e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (let: e‚Çõ1 in e‚Çõ2)
        (let: e‚Çú1 in e‚Çú2)
  | tmc_dir_call e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (e‚Çõ1 e‚Çõ2)
        (e‚Çú1 e‚Çú2)
  | tmc_dir_unop op e‚Çõ e‚Çú :
      tmc_dir Œæ e‚Çõ e‚Çú ‚Üí
      tmc_dir Œæ
        (LambdaUnop op e‚Çõ)
        (LambdaUnop op e‚Çú)
  | tmc_dir_binop op e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (LambdaBinop op e‚Çõ1 e‚Çõ2)
        (LambdaBinop op e‚Çú1 e‚Çú2)
  | tmc_dir_binop_det op e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (LambdaBinopDet op e‚Çõ1 e‚Çõ2)
        (LambdaBinopDet op e‚Çú1 e‚Çú2)
  | tmc_dir_if e‚Çõ0 e‚Çõ1 e‚Çõ2 e‚Çú0 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ0 e‚Çú0 ‚Üí
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (if: e‚Çõ0 then e‚Çõ1 else e‚Çõ2)
        (if: e‚Çú0 then e‚Çú1 else e‚Çú2)
  | tmc_dir_constr tag e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (&tag e‚Çõ1 e‚Çõ2)
        (&tag e‚Çú1 e‚Çú2)
  | tmc_dir_constr_dps_1 tag e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dps Œæ $0 ùüö e‚Çõ2.[ren (+1)] e‚Çú2 ‚Üí
      tmc_dir Œæ
        (&tag e‚Çõ1 e‚Çõ2)
        (let: &tag e‚Çú1 #() in e‚Çú2 ;; $0)
  | tmc_dir_constr_dps_2 tag e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dps Œæ $0 ùüô e‚Çõ1.[ren (+1)] e‚Çú1 ‚Üí
      tmc_dir Œæ
        (&tag e‚Çõ1 e‚Çõ2)
        (let: &tag #() e‚Çú2 in e‚Çú1 ;; $0)
  | tmc_dir_constr_det tag e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (&&tag e‚Çõ1 e‚Çõ2)
        (&&tag e‚Çú1 e‚Çú2)
  | tmc_dir_load e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (![e‚Çõ2] e‚Çõ1)
        (![e‚Çú2] e‚Çú1)
  | tmc_dir_store e‚Çõ1 e‚Çõ2 e‚Çõ3 e‚Çú1 e‚Çú2 e‚Çú3 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ e‚Çõ3 e‚Çú3 ‚Üí
      tmc_dir Œæ
        (e‚Çõ1 <-[e‚Çõ2]- e‚Çõ3)
        (e‚Çú1 <-[e‚Çú2]- e‚Çú3)
with tmc_dps Œæ : lambda_expr ‚Üí lambda_expr ‚Üí lambda_expr ‚Üí lambda_expr ‚Üí Prop :=
  | tmc_dps_base dst idx e‚Çõ e‚Çú :
      tmc_dir Œæ e‚Çõ e‚Çú ‚Üí
      tmc_dps Œæ dst idx
        e‚Çõ
        (dst <-[idx]- e‚Çú)
  | tmc_dps_let dst idx e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dps Œæ dst.[ren (+1)] idx.[ren (+1)] e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dps Œæ dst idx
        (let: e‚Çõ1 in e‚Çõ2)
        (let: e‚Çú1 in e‚Çú2)
  | tmc_dps_call dst idx func func_dps e‚Çõ e‚Çú e‚Çú' :
      Œæ !! func = Some func_dps ‚Üí
      tmc_dir Œæ e‚Çõ e‚Çú ‚Üí
      e‚Çú' = (let: e‚Çú in func_dps (dst.[ren (+1)], idx.[ren (+1)], $0))%lambda_expr ‚Üí
      tmc_dps Œæ dst idx
        (func e‚Çõ)
        e‚Çú'
  | tmc_dps_if dst idx e‚Çõ0 e‚Çõ1 e‚Çõ2 e‚Çú0 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ0 e‚Çú0 ‚Üí
      tmc_dps Œæ dst idx e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dps Œæ dst idx e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dps Œæ dst idx
        (if: e‚Çõ0 then e‚Çõ1 else e‚Çõ2)
        (if: e‚Çú0 then e‚Çú1 else e‚Çú2)
  | tmc_dps_constr_1 dst idx tag e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 e‚Çú :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dps Œæ $0 ùüö e‚Çõ2.[ren (+1)] e‚Çú2 ‚Üí
      e‚Çú = (let: &tag e‚Çú1 #() in dst.[ren (+1)] <-[idx.[ren (+1)]]- $0 ;; e‚Çú2)%lambda_expr ‚Üí
      tmc_dps Œæ dst idx
        (&tag e‚Çõ1 e‚Çõ2)
        e‚Çú
  | tmc_dps_constr_2 dst idx tag e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 e‚Çú :
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dps Œæ $0 ùüô e‚Çõ1.[ren (+1)] e‚Çú1 ‚Üí
      e‚Çú = (let: &tag #() e‚Çú2 in dst.[ren (+1)] <-[idx.[ren (+1)]]- $0 ;; e‚Çú1)%lambda_expr ‚Üí
      tmc_dps Œæ dst idx
        (&tag e‚Çõ1 e‚Çõ2)
        e‚Çú.

Scheme tmc_dir_dps_ind := Minimality for tmc_dir Sort Prop
with tmc_dps_dir_ind := Minimality for tmc_dps Sort Prop.
Combined Scheme tmc_ind from tmc_dir_dps_ind, tmc_dps_dir_ind.

Create HintDb tmc.

#[export] Hint Constructors tmc_dir : tmc.
#[export] Hint Constructors tmc_dps : tmc.

Record tmc {prog‚Çõ prog‚Çú} := {
  tmc_Œæ : gmap lambda_function lambda_function ;

  tmc_Œæ_dom :
    dom tmc_Œæ ‚äÜ dom prog‚Çõ ;
  tmc_dom :
    dom prog‚Çú = dom prog‚Çõ ‚à™ map_img tmc_Œæ ;
  tmc_dirs func e‚Çõ :
    prog‚Çõ !! func = Some e‚Çõ ‚Üí
      ‚àÉ e‚Çú,
      tmc_dir tmc_Œæ e‚Çõ e‚Çú ‚àß
      prog‚Çú !! func = Some e‚Çú ;
  tmc_dpss func e‚Çõ func_dps :
    prog‚Çõ !! func = Some e‚Çõ ‚Üí
    tmc_Œæ !! func = Some func_dps ‚Üí
      ‚àÉ e‚Çú,
      tmc_dps tmc_Œæ $1 $2 e‚Çõ e‚Çú ‚àß
      prog‚Çú !! func_dps = Some (
        let: ![ùüô] $0 in
        let: ![ùüö] $0 in
        let: ![ùüô] $1 in
        let: ![ùüö] $3 in
        e‚Çú
      )%lambda_expr ;
}.
#[global] Arguments tmc : clear implicits.
