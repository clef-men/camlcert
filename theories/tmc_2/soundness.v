From Coq Require Import
  Wellfounded.Lexicographic_Product.

From camlcert Require Import
  prelude.
From camlcert.data_lang Require Import
  refinement
  subexpr
  sim.proofmode
  sim.adequacy
  rsim.rules
  rsim.notations.
From camlcert.tmc_2 Require Export
  definition.
From camlcert.tmc_2 Require Import
  metatheory.
From camlcert Require Import
  options.

Section sim_GS.
  Context `{sim_programs : !SimPrograms data_ectx_lang data_ectx_lang}.
  Context `{sim_GS : !SimGS Œ£}.
  Context (tmc : tmc sim_prog‚Çõ sim_prog‚Çú).

  Implicit Types func func_dps : data_function.
  Implicit Types annot : data_annotation.
  Implicit Types idx idx‚Çõ idx‚Çú : data_index.
  Implicit Types l l‚Çõ l‚Çú dst : loc.
  Implicit Types v v‚Çõ v‚Çú : data_val.
  Implicit Types e e‚Çõ e‚Çú : data_expr.
  Implicit Types C : tmc_rctx.

  Fixpoint tmc_chain v C dst idx : iProp Œ£ :=
    match C with
    | [] =>
        (dst +‚Çó idx) ‚Ü¶‚Çú v
    | c :: C =>
        ‚àÉ l,
        (l +‚Çó 0) ‚Ü¶‚Çú c.(tmc_rctxi_tag) ‚àó
        (l +‚Çó c.(tmc_rctxi_side)) ‚Ü¶‚Çú v ‚àó
        (l +‚Çó tmc_side_invert c.(tmc_rctxi_side)) ‚Ü¶‚Çú c.(tmc_rctxi_val) ‚àó
        tmc_chain l C dst idx
    end.

  Lemma tmc_chain_snoc v C l c dst idx :
    tmc_chain v C l c.(tmc_rctxi_side) -‚àó
    (l +‚Çó 0) ‚Ü¶‚Çú c.(tmc_rctxi_tag) -‚àó
    (l +‚Çó tmc_side_invert c.(tmc_rctxi_side)) ‚Ü¶‚Çú c.(tmc_rctxi_val) -‚àó
    (dst +‚Çó idx) ‚Ü¶‚Çú l -‚àó
    tmc_chain v (C ++ [c]) dst idx.
  Proof.
    iInduction C as [] "IH" forall (v); iSmash.
  Qed.

  #[local] Lemma tmc_chain_spec_aux Œ® Œß Œ¶ e‚Çõ (K : data_ectx) C e‚Çú :
    SIM e‚Çõ ‚â≥ e‚Çú [[ Œß ]] {{ Œª e‚Çõ' e‚Çú',
      ‚àÉ v‚Çú,
      ‚åúe‚Çú' = v‚Çú‚åù ‚àó
      Œ® e‚Çõ' v‚Çú
    }} -‚àó
    ( ‚àÄ e‚Çõ' v‚Çú v‚Çú',
      Œ® e‚Çõ' v‚Çú -‚àó
      ( ‚àÄ dst idx,
        (dst +‚Çó idx) ‚Ü¶‚Çú v‚Çú' -‚àó
        tmc_chain v‚Çú C dst idx
      ) -‚àó
      SIM e‚Çõ' ‚â≥ K @@ #v‚Çú' [[ Œß ]] {{ Œ¶ }}
    ) -‚àó
    SIM e‚Çõ ‚â≥ K @@ (C : tmc_ctx) @@ e‚Çú [[ Œß ]] {{ Œ¶ }}.
  Proof.
    iIntros "Hsim HŒ¶".
    iInduction C as [| (tag, side, v) C] "IH" using rev_ind forall (K).
    - iApply sim_bind‚Çú.
      sim_mono "Hsim".
    - iApply sim_bind‚Çú.
      setoid_rewrite fmap_snoc. setoid_rewrite foldl_snoc.
      destruct side.
      all: sim_block‚Çú.
      + iApply sim_bind_inv‚Çú.
        sim_apply ("IH" $! ([DataEctxiLet _] ++ K) with "Hsim [HŒ¶]").
        iIntros "%e‚Çõ' %v‚Çú %v‚Çú' HŒ® Hchain /=".
        iApply sim_bind‚Çú.
        sim_block_det‚Çú as l‚Çú "Hl‚Çú0" "Hl‚Çú1" "Hl‚Çú2".
        iApply sim_bind_inv‚Çú.
        sim_apply ("HŒ¶" with "HŒ® [-]"). iIntros "%dst %idx Hdst".
        iDestruct ("Hchain" $! _ ùüô with "Hl‚Çú1") as "Hchain".
        iApply (tmc_chain_snoc _ _ _ (TmcRctxi tag TmcLeft v) with "Hchain Hl‚Çú0 Hl‚Çú2 Hdst").
      + sim_pures‚Çú.
        iApply sim_bind_inv‚Çú.
        sim_apply ("IH" $! ([DataEctxiLet _] ++ K) with "Hsim [HŒ¶]").
        iIntros "%e‚Çõ' %v‚Çú %v‚Çú' HŒ® Hchain /=".
        iApply sim_bind‚Çú.
        sim_block_det‚Çú as l‚Çú "Hl‚Çú0" "Hl‚Çú1" "Hl‚Çú2".
        iApply sim_bind_inv‚Çú.
        sim_apply ("HŒ¶" with "HŒ® [-]"). iIntros "%dst %idx Hdst".
        iDestruct ("Hchain" $! _ ùüô with "Hl‚Çú1") as "Hchain".
        iApply (tmc_chain_snoc _ _ _ (TmcRctxi tag TmcLeft v) with "Hchain Hl‚Çú0 Hl‚Çú2 Hdst").
      + sim_pures‚Çú.
        iApply sim_bind_inv‚Çú.
        sim_apply ("IH" $! ([DataEctxiLet _] ++ K) with "Hsim [HŒ¶]").
        iIntros "%e‚Çõ' %v‚Çú %v‚Çú' HŒ® Hchain /=".
        iApply sim_bind‚Çú.
        sim_block_det‚Çú as l‚Çú "Hl‚Çú0" "Hl‚Çú1" "Hl‚Çú2".
        iApply sim_bind_inv‚Çú.
        sim_apply ("HŒ¶" with "HŒ® [-]"). iIntros "%dst %idx Hdst".
        iDestruct ("Hchain" $! _ ùüö with "Hl‚Çú2") as "Hchain".
        iApply (tmc_chain_snoc _ _ _ (TmcRctxi tag TmcRight v) with "Hchain Hl‚Çú0 Hl‚Çú1 Hdst").
      + iApply sim_bind_inv‚Çú.
        sim_apply ("IH" $! ([DataEctxiLet _] ++ K) with "Hsim [HŒ¶]").
        iIntros "%e‚Çõ' %v‚Çú %v‚Çú' HŒ® Hchain /=".
        iApply sim_bind‚Çú.
        sim_block_det‚Çú as l‚Çú "Hl‚Çú0" "Hl‚Çú1" "Hl‚Çú2".
        iApply sim_bind_inv‚Çú.
        sim_apply ("HŒ¶" with "HŒ® [-]"). iIntros "%dst %idx Hdst".
        iDestruct ("Hchain" $! _ ùüö with "Hl‚Çú2") as "Hchain".
        iApply (tmc_chain_snoc _ _ _ (TmcRctxi tag TmcRight v) with "Hchain Hl‚Çú0 Hl‚Çú1 Hdst").
  Qed.
  Lemma tmc_chain_spec Œ® Œß Œ¶ e‚Çõ C e‚Çú :
    SIM e‚Çõ ‚â≥ e‚Çú [[ Œß ]] {{ Œª e‚Çõ' e‚Çú',
      ‚àÉ v‚Çú,
      ‚åúe‚Çú' = v‚Çú‚åù ‚àó
      Œ® e‚Çõ' v‚Çú
    }} -‚àó
    ( ‚àÄ e‚Çõ' v‚Çú v‚Çú',
      Œ® e‚Çõ' v‚Çú -‚àó
      ( ‚àÄ dst idx,
        (dst +‚Çó idx) ‚Ü¶‚Çú v‚Çú' -‚àó
        tmc_chain v‚Çú C dst idx
      ) -‚àó
      SIM e‚Çõ' ‚â≥ v‚Çú' [[ Œß ]] {{ Œ¶ }}
    ) -‚àó
    SIM e‚Çõ ‚â≥ (C : tmc_ctx) @@ e‚Çú [[ Œß ]] {{ Œ¶ }}.
  Proof.
    apply (tmc_chain_spec_aux _ _ _ _ []).
  Qed.

  Implicit Types Œ¶ : data_val ‚Üí data_val ‚Üí iProp Œ£.
  Implicit Types Œ® : data_expr ‚Üí data_expr ‚Üí iProp Œ£.

  Definition tmc_protocol_dir Œ® e‚Çõ e‚Çú : iProp Œ£ :=
    ‚àÉ func annot v‚Çõ v‚Çú,
    ‚åúfunc ‚àà dom sim_prog‚Çõ‚åù ‚àó
    ‚åúe‚Çõ = (DataFunc func annot) v‚Çõ ‚àß e‚Çú = (DataFunc func annot) v‚Çú‚åù ‚àó
    v‚Çõ ‚âà v‚Çú ‚àó
      ‚àÄ v‚Çõ' v‚Çú',
      v‚Çõ' ‚âà v‚Çú' -‚àó
      Œ® v‚Çõ' v‚Çú'.

  Definition tmc_protocol_dps Œ® e‚Çõ e‚Çú : iProp Œ£ :=
    ‚àÉ func annot v‚Çõ func_dps l1 l2 dst idx v‚Çú,
    ‚åúfunc ‚àà dom sim_prog‚Çõ ‚àß tmc.(tmc_Œæ) !! func = Some func_dps‚åù ‚àó
    ‚åúe‚Çõ = (DataFunc func annot) v‚Çõ ‚àß e‚Çú = (DataFunc func_dps annot) l1‚åù ‚àó
    (l1 +‚Çó 1) ‚Ü¶‚Çú l2 ‚àó (l1 +‚Çó 2) ‚Ü¶‚Çú v‚Çú ‚àó
    (l2 +‚Çó 1) ‚Ü¶‚Çú dst ‚àó (l2 +‚Çó 2) ‚Ü¶‚Çú idx ‚àó
    (dst +‚Çó idx) ‚Ü¶‚Çú () ‚àó
    v‚Çõ ‚âà v‚Çú ‚àó
      ‚àÄ v‚Çõ' v‚Çú',
      (dst +‚Çó idx) ‚Ü¶‚Çú v‚Çú' -‚àó
      v‚Çõ' ‚âà v‚Çú' -‚àó
      Œ® v‚Çõ' #().

  Definition tmc_protocol Œ® e‚Çõ e‚Çú : iProp Œ£ :=
    tmc_protocol_dir Œ® e‚Çõ e‚Çú ‚à®
    tmc_protocol_dps Œ® e‚Çõ e‚Çú.

  Lemma tmc_protocol_dps' Œ¶ func annot v‚Çõ func_dps dst idx v‚Çú :
    func ‚àà dom sim_prog‚Çõ ‚Üí
    tmc.(tmc_Œæ) !! func = Some func_dps ‚Üí
    (dst +‚Çó idx) ‚Ü¶‚Çú () -‚àó
    v‚Çõ ‚âà v‚Çú -‚àó
    ( ‚àÄ v‚Çõ' v‚Çú',
      (dst +‚Çó idx) ‚Ü¶‚Çú v‚Çú' -‚àó
      v‚Çõ' ‚âà v‚Çú' -‚àó
      Œ¶ v‚Çõ' ()%data_val
    ) -‚àó
    SIM (DataFunc func annot) v‚Çõ ‚â≥ (DataFunc func_dps annot) (dst, idx, v‚Çú) [[ tmc_protocol ]] {{# Œ¶ }}.
  Proof.
    rewrite simv_unseal.
    iIntros "%Hfunc‚Çõ %HŒæ Hdst #Hv HŒ¶".
    sim_block‚Çú; sim_block‚Çú;
      sim_block_det‚Çú as l2 "Hl20" "Hl21" "Hl22";
      sim_block_det‚Çú as l1 "Hl10" "Hl11" "Hl12";
      sim_apply (sim_apply_protocol (sim_post_vals' Œ¶) _ _ ((DataFunc func annot) v‚Çõ) ((DataFunc func_dps annot) l1)); iIntros "%œÉ‚Çõ %œÉ‚Çú $ !>";
      ( iSplitL;
        [ iRight; repeat iExists _; iFrame "#‚àó";
          do 2 (iSplit; first done); iIntros "%v‚Çõ' %v‚Çú' Hdst #Hv'"; iSmash
        | iIntros "%e‚Çõ %e‚Çú HŒ¶";
          sim_post
        ]
      ).
  Qed.

  Definition tmc_expr_dir_post :=
    (‚âà)%I.
  Definition tmc_expr_dir_specification' e‚Çõ e‚Çú :=
    data_expr_well_formed sim_prog‚Çõ e‚Çõ ‚Üí
    {{{ True }}} e‚Çõ ‚©æ e‚Çú [[ tmc_protocol ]] {{{# tmc_expr_dir_post }}}.
  Definition tmc_expr_dir_specification e‚Çõ e‚Çú :=
    tmc_expr_dir tmc.(tmc_Œæ) e‚Çõ e‚Çú ‚Üí
    tmc_expr_dir_specification' e‚Çõ e‚Çú.

  Definition tmc_expr_dps_post dst idx C v‚Çõ v‚Çú : iProp Œ£ :=
    ‚àÉ v‚Çú',
    ‚åúv‚Çú = ()%data_val‚åù ‚àó
    tmc_chain v‚Çú' C dst idx ‚àó
    v‚Çõ ‚âà v‚Çú'.
  Definition tmc_expr_dps_specification' dst idx C e‚Çõ e‚Çú :=
    data_expr_well_formed sim_prog‚Çõ e‚Çõ ‚Üí
    {{{ (dst +‚Çó idx) ‚Ü¶‚Çú () }}} e‚Çõ ‚©æ e‚Çú [[ tmc_protocol ]] {{{# tmc_expr_dps_post dst idx C }}}.
  Definition tmc_expr_dps_specification dst idx C e‚Çõ e‚Çú :=
    tmc_expr_dps tmc.(tmc_Œæ) dst idx C e‚Çõ e‚Çú ‚Üí
    tmc_expr_dps_specification' dst idx C e‚Çõ e‚Çú.

  Definition tmc_expr_specification e‚Çõ e‚Çú :=
    tmc_expr_dir_specification e‚Çõ e‚Çú ‚àß
    ‚àÄ dst idx C, tmc_expr_dps_specification dst idx C e‚Çõ e‚Çú.

  Lemma tmc_expr_spec e‚Çõ e‚Çú :
    tmc_expr_specification e‚Çõ e‚Çú.
  Proof.
    move: e‚Çõ e‚Çú.
    cut (
      ‚àÄ C e‚Çõ e‚Çú,
      tmc_expr_dir_specification e‚Çõ e‚Çú ‚àß
      ‚àÄ dst idx, tmc_expr_dps_specification dst idx C e‚Çõ e‚Çú
    ). {
      intros H. split; [apply (H inhabitant) | naive_solver].
    }
    cut (
      ‚àÄ e‚Çõ e‚Çú,
      ( (‚àÄ e‚Çõ' e‚Çú, e‚Çõ' ‚äè e‚Çõ ‚Üí tmc_expr_dir_specification e‚Çõ' e‚Çú) ‚Üí
        (‚àÄ dst idx C e‚Çõ' e‚Çú, e‚Çõ' ‚äè e‚Çõ ‚Üí tmc_expr_dps_specification dst idx C e‚Çõ' e‚Çú) ‚Üí
        tmc_expr_dir_specification e‚Çõ e‚Çú
      ) ‚àß (
        ‚àÄ dst idx C,
        (‚àÄ e‚Çõ' e‚Çú, e‚Çõ' ‚äè e‚Çõ ‚Üí tmc_expr_dir_specification e‚Çõ' e‚Çú) ‚Üí
        (‚àÄ dst idx C e‚Çõ' e‚Çú, e‚Çõ' ‚äè e‚Çõ ‚Üí tmc_expr_dps_specification dst idx C e‚Çõ' e‚Çú) ‚Üí
        (‚àÄ dst idx C' e‚Çú, length C' < length C ‚Üí tmc_expr_dps_specification dst idx C' e‚Çõ e‚Çú) ‚Üí
        tmc_expr_dps_specification dst idx C e‚Çõ e‚Çú
      )
    ). {
      intros H C e‚Çõ.
      remember (length C) as len eqn:Hlen.
      change e‚Çõ with (projT1 (existT e‚Çõ len)).
      change len with (projT2 (existT e‚Çõ len)) in Hlen.
      remember (existT e‚Çõ len) as x eqn:Hx. clear Hx len e‚Çõ. move: x C Hlen.
      induction x as [(e‚Çõ, len) IHx] using (well_founded_ind (wf_lexprod _ _ _ _ data_subexpr_wf (Œª _, Nat.lt_wf_0))).
      intros C Hlen. split.
      - apply H; clear e‚Çú.
        + intros e‚Çõ' e‚Çú ?.
          efeed pose proof (IHx (existT e‚Çõ' len)); [| naive_solver..].
          apply Relation_Operators.left_lex. done.
        + intros dst idx C' e‚Çõ' e‚Çú ?.
          efeed pose proof (IHx (existT e‚Çõ' (length C'))); [| naive_solver..].
          auto using Relation_Operators.lexprod.
      - intros dst idx.
        apply H; clear dst idx e‚Çú.
        + intros e‚Çõ' e‚Çú ?.
          efeed pose proof (IHx (existT e‚Çõ' (length C))); [| naive_solver..].
          auto using Relation_Operators.lexprod.
        + intros dst idx C' e‚Çõ' e‚Çú' ?.
          efeed pose proof (IHx (existT e‚Çõ' (length C'))); [| naive_solver..].
          auto using Relation_Operators.lexprod.
        + intros dst idx C' e‚Çú' ?.
          efeed pose proof (IHx (existT e‚Çõ (length C'))); [| naive_solver..].
          apply Relation_Operators.right_lex. naive_solver.
    }
    cut (
      ( ‚àÄ e‚Çõ e‚Çú,
        tmc_expr_dir tmc.(tmc_Œæ) e‚Çõ e‚Çú ‚Üí
        (‚àÄ e‚Çõ' e‚Çú, e‚Çõ' ‚äè e‚Çõ ‚Üí tmc_expr_dir_specification e‚Çõ' e‚Çú) ‚Üí
        (‚àÄ dst idx C e‚Çõ' e‚Çú, e‚Çõ' ‚äè e‚Çõ ‚Üí tmc_expr_dps_specification dst idx [] e‚Çõ' e‚Çú) ‚Üí
        tmc_expr_dir_specification' e‚Çõ e‚Çú
      ) ‚àß (
        ‚àÄ (dst idx : data_expr) (C : tmc_ctx) e‚Çõ e‚Çú,
        tmc_expr_dps tmc.(tmc_Œæ) dst idx C e‚Çõ e‚Çú ‚Üí
        ‚àÄ dst' idx' C',
        dst = dst' ‚Üí
        idx = idx' ‚Üí
        C = C' ‚Üí
        (‚àÄ e‚Çõ' e‚Çú, e‚Çõ' ‚äè e‚Çõ ‚Üí tmc_expr_dir_specification e‚Çõ' e‚Çú) ‚Üí
        (‚àÄ dst idx C e‚Çõ' e‚Çú, e‚Çõ' ‚äè e‚Çõ ‚Üí tmc_expr_dps_specification dst idx C e‚Çõ' e‚Çú) ‚Üí
        (‚àÄ dst idx C e‚Çú, length C < length C' ‚Üí tmc_expr_dps_specification dst idx C e‚Çõ e‚Çú) ‚Üí
        tmc_expr_dps_specification' dst' idx' C' e‚Çõ e‚Çú
      )
    ). {
      rewrite /tmc_expr_dir_specification /tmc_expr_dps_specification.
      naive_solver.
    }
    apply tmc_expr_ind;
      rewrite /tmc_expr_dir_specification' /tmc_expr_dps_specification';
      intros *;
      [ intros _ _
      | intros _ _
      | intros Hdir1 _ Hdir2 _ IHdir‚Çõ _
      | intros Hdir1 _ Hdir2 _ IHdir‚Çõ _
      | intros Hdir _ IHdir‚Çõ _
      | intros Hdir1 _ Hdir2 _ IHdir‚Çõ _
      | intros _ _ _ _ _ _
      | intros Hdir0 _ Hdir1 _ Hdir2 _ IHdir‚Çõ _
      | intros Hdir1 _ Hdir2 _ IHdir‚Çõ _
      | intros Hdir1 _ Hdps2 _ IHdir‚Çõ IHdps‚Çõ
      | intros Hdir1 _ Hdps2 _ IHdir‚Çõ IHdps‚Çõ
      | intros Hdps1 _ Hdps2 _ -> _ IHdps‚Çõ
      | intros _ _ _ _ _ _
      | intros Hdir1 _ Hdir2 _ IHdir‚Çõ _
      | intros Hdir1 _ Hdir2 _ Hdir3 _ IHdir‚Çõ _
      | intros Hdir IHdir -> dst' idx' C' -> -> -> IHdir‚Çõ IHdps‚Çõ _
      | intros Hdir1 _ Hdps2 _ dst' idx' C' -> -> -> IHdir‚Çõ IHdps‚Çõ _
      | intros Hfunc Hdir _ -> dst' idx' C' -> -> <-%(inj tmc_rctx_to_ctx []) IHdir‚Çõ _ _
      | intros Hdir0 _ Hdps1 _ Hdps2 _ dst' idx' C' -> -> -> IHdir‚Çõ IHdps‚Çõ _
      | intros Hdir1 _ Hdps2 _ -> dst' idx' C' -> -> -> IHdir‚Çõ IHdps‚Çõ _
      | intros Hdir2 _ Hdps1 _ -> dst' idx' C' -> -> -> IHdir‚Çõ IHdps‚Çõ _
      | intros Hdps IHdps -> dst' idx' C' -> -> HC _ _ IHC
      ];
      iIntros "%Hwf %Œ¶ Hpre HŒ¶".
    (* tmc_expr_dir *)
    - iApply rsimv_val; [done | iSmash].
    - iApply rsimv_var. iSmash.
    - iApply rsimv_let;
        iApply IHdir‚Çõ; auto with data_lang.
    - iApply rsimv_call;
        [iApply IHdir‚Çõ; auto with data_lang.. |].
      iIntros "%func %annot %v‚Çõ %v‚Çú %Hfunc #Hv".
      pose (Œ® := sim_post_vals' tmc_expr_dir_post).
      iApply (sim_apply_protocol Œ®). iIntros "%œÉ‚Çõ %œÉ‚Çú $ !>". iSplitR.
      { rewrite /Œ® /sim_post_vals'. iSmash. }
      iIntros "% % (%v‚Çõ' & %v‚Çú' & (-> & ->) & HŒ®)".
      sim_post.
    - iApply rsimv_unop; last iSmash.
      iApply IHdir‚Çõ; auto with data_lang.
    - iApply rsimv_binop; last iSmash;
        iApply IHdir‚Çõ; auto with data_lang.
    - iSmash.
    - iApply rsimv_if; last iSplit;
        iApply IHdir‚Çõ; auto with data_lang.
    - iApply rsimv_block; last iSmash;
        iApply IHdir‚Çõ; auto with data_lang.
    - iIntros "%Œì % % (-> & ->) #HŒì /=".
      sim_block‚Çõ1.
      sim_apply simv_block_val‚Çú2.
      { sim_apply IHdir‚Çõ; auto with data_lang. }
      iIntros "%v‚Çõ1 %l‚Çú %v‚Çú1 Hl‚Çú0 Hl‚Çú1 Hl‚Çú2 #Hv1".
      sim_apply (IHdps‚Çõ l‚Çú ùüö [] e‚Çõ2 e‚Çú2.[#l‚Çú/] with "Hl‚Çú2 [Hl‚Çú0 Hl‚Çú1 HŒ¶]"); first 4 last.
      { autosubst. }
      { auto with data_lang. }
      { eapply tmc_expr_dps_subst; eauto; autosubst. }
      { auto with data_lang. }
      iIntros "%v‚Çõ2 % (%v‚Çú2 & -> & Hl‚Çú2 & #Hv2)".
      sim_block_det‚Çõ as l‚Çõ "Hl‚Çõ0" "Hl‚Çõ1" "Hl‚Çõ2".
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ0 Hl‚Çú0 [//]") as "Hl0".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ1 Hl‚Çú1 [//]") as "Hl1".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ2 Hl‚Çú2 [//]") as "Hl2".
      sim_heap_bij_insert.
      sim_pures.
    - iIntros "%Œì % % (-> & ->) #HŒì /=".
      sim_block‚Çõ2.
      sim_apply simv_block_val‚Çú1.
      { sim_apply IHdir‚Çõ; auto with data_lang. }
      iIntros "%v‚Çõ2 %l‚Çú %v‚Çú2 Hl‚Çú0 Hl‚Çú1 Hl‚Çú2 #Hv2".
      sim_apply (IHdps‚Çõ l‚Çú ùüô [] e‚Çõ1 e‚Çú1.[#l‚Çú/] with "Hl‚Çú1 [Hl‚Çú0 Hl‚Çú2 HŒ¶]"); first 4 last.
      { autosubst. }
      { auto with data_lang. }
      { eapply tmc_expr_dps_subst; eauto; autosubst. }
      { auto with data_lang. }
      iIntros "%v‚Çõ1 % (%v‚Çú1 & -> & Hl‚Çú1 & #Hv1)".
      sim_block_det‚Çõ as l‚Çõ "Hl‚Çõ0" "Hl‚Çõ1" "Hl‚Çõ2".
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ0 Hl‚Çú0 [//]") as "Hl0".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ1 Hl‚Çú1 [//]") as "Hl1".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ2 Hl‚Çú2 [//]") as "Hl2".
      sim_heap_bij_insert.
      sim_pures.
    - iIntros "%Œì % % (-> & ->) #HŒì /=".
      sim_block‚Çõ1.
      rewrite sim_post_vals_unseal.
      sim_apply sim_block_val‚Çú. iIntros "%l‚Çú Hl‚Çú0 Hl‚Çú1 Hl‚Çú2". iApply sim_post.
      rewrite -sim_post_vals_unseal.
      sim_apply (IHdps‚Çõ l‚Çú ùüô [] e‚Çõ1 e‚Çú1.[#l‚Çú/] with "Hl‚Çú1 [Hl‚Çú0 Hl‚Çú2 HŒ¶]"); first 4 last.
      { autosubst. }
      { auto with data_lang. }
      { eapply tmc_expr_dps_subst; first apply Hdps1; autosubst. }
      { auto with data_lang. }
      iIntros "%v‚Çõ1 % (%v‚Çú1 & -> & Hl‚Çú1 & #Hv1)".
      sim_apply (IHdps‚Çõ l‚Çú ùüö [] e‚Çõ2 e‚Çú2.[#l‚Çú/] with "Hl‚Çú2 [Hl‚Çú0 Hl‚Çú1 HŒ¶]"); first 4 last.
      { autosubst. }
      { auto with data_lang. }
      { eapply tmc_expr_dps_subst; first apply Hdps2; autosubst. }
      { auto with data_lang. }
      iIntros "%v‚Çõ2 % (%v‚Çú2 & -> & Hl‚Çú2 & #Hv2)".
      sim_block_det‚Çõ as l‚Çõ "Hl‚Çõ0" "Hl‚Çõ1" "Hl‚Çõ2".
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ0 Hl‚Çú0 [//]") as "Hl0".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ1 Hl‚Çú1 [//]") as "Hl1".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ2 Hl‚Çú2 [//]") as "Hl2".
      sim_heap_bij_insert.
      sim_pures.
    - iSmash.
    - iApply rsimv_load; last iSmash;
        iApply IHdir‚Çõ; auto with data_lang.
    - iApply rsimv_store; last iSmash;
        iApply IHdir‚Çõ; auto with data_lang.
    (* tmc_expr_dps *)
    - iIntros "%Œì % % (-> & ->) #HŒì /=".
      sim_apply (tmc_chain_spec (Œª e‚Çõ v‚Çú, ‚àÉ v‚Çõ, ‚åúe‚Çõ = v‚Çõ‚åù ‚àó v‚Çõ ‚âà v‚Çú)%I).
      { iApply (sim_mono _ (sim_post_vals (‚âà))).
        { rewrite sim_post_vals_unseal. iSmash. }
        sim_apply (IHdir with "[//]"); first auto.
      }
      iIntros "%e‚Çõ' %v‚Çú %v‚Çú' (%v‚Çõ & -> & #Hv) Hchain".
      sim_store‚Çú.
    - iApply rsimv_let.
      { iApply (IHdir‚Çõ with "[//] []"); auto with data_lang. }
      rewrite tmc_rctx_hsubst in Hdps2.
      iApply (IHdps‚Çõ with "Hpre [HŒ¶]"); [auto with data_lang.. |]. iSmash.
    - iIntros "%Œì % % (-> & ->) #HŒì /=".
      sim_apply (IHdir‚Çõ with "[//] [Hpre HŒ¶] [//] HŒì"); [auto with data_lang.. |].
      iIntros "%v‚Çõ %v‚Çú #Hv".
      sim_apply (tmc_protocol_dps' with "Hpre Hv"); auto with data_lang.
    - iApply rsimv_if.
      { iApply (IHdir‚Çõ with "[//] []"); auto with data_lang. }
      iSplit; iApply (IHdps‚Çõ with "Hpre [HŒ¶]"); [auto with data_lang.. | iSmash].
    - iIntros "%Œì % % (-> & ->) #HŒì /=".
      sim_block‚Çõ1.
      sim_apply (IHdir‚Çõ with "[//] [Hpre HŒ¶] [//] HŒì"); [auto with data_lang.. |].
      iIntros "%v‚Çõ1 %v‚Çú1 #Hv1".
      sim_pures.
      sim_apply (IHdps‚Çõ dst' idx' (TmcRctxi _ _ _ :: C') e‚Çõ2 e‚Çú2.[#v‚Çú1/] with "Hpre [HŒ¶] [] HŒì"); first 4 last.
      { autosubst. }
      { auto with data_lang. }
      { eapply tmc_expr_dps_subst; eauto; asimpl; done. }
      { auto with data_lang. }
      iIntros "%v‚Çõ2 % (%v‚Çú2 & -> & (%l‚Çú & Hl‚Çú0 & Hl‚Çú2 & Hl‚Çú1 & HC') & #Hv2) /=".
      sim_block_det‚Çõ as l‚Çõ "Hl‚Çõ0" "Hl‚Çõ1" "Hl‚Çõ2".
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ0 Hl‚Çú0 [//]") as "Hl0".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ1 Hl‚Çú1 [//]") as "Hl1".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ2 Hl‚Çú2 [//]") as "Hl2".
      sim_heap_bij_insert.
      iSmash.
    - iIntros "%Œì % % (-> & ->) #HŒì /=".
      sim_block‚Çõ2.
      sim_apply (IHdir‚Çõ with "[//] [Hpre HŒ¶] [//] HŒì"); [auto with data_lang.. |].
      iIntros "%v‚Çõ2 %v‚Çú2 #Hv2".
      sim_pures.
      sim_apply (IHdps‚Çõ dst' idx' (TmcRctxi _ _ _ :: C') e‚Çõ1 e‚Çú1.[#v‚Çú2/] with "Hpre [HŒ¶] [] HŒì"); first 4 last.
      { autosubst. }
      { auto with data_lang. }
      { eapply tmc_expr_dps_subst; eauto; asimpl; done. }
      { auto with data_lang. }
      iIntros "%v‚Çõ1 % (%v‚Çú1 & -> & (%l‚Çú & Hl‚Çú0 & Hl‚Çú1 & Hl‚Çú2 & HC') & #Hv1) /=".
      sim_block_det‚Çõ as l‚Çõ "Hl‚Çõ0" "Hl‚Çõ1" "Hl‚Çõ2".
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ0 Hl‚Çú0 [//]") as "Hl0".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ1 Hl‚Çú1 [//]") as "Hl1".
      sim_heap_bij_insert.
      iDestruct (sim_heap_bij_tie_eq_2 with "Hl‚Çõ2 Hl‚Çú2 [//]") as "Hl2".
      sim_heap_bij_insert.
      iSmash.
    - iIntros "%Œì % % (-> & ->) #HŒì /=".
      rewrite sim_post_vals_unseal.
      destruct C' as [| (tag, side, v) C']; first done. injection HC as -> ->.
      destruct side.
      + sim_apply sim_block_val‚Çú. iIntros "%l‚Çú Hl‚Çú0 Hl‚Çú1 Hl‚Çú2".
        sim_post. sim_pures‚Çú. rewrite tmc_ctx_fill_subst. asimpl.
        sim_apply (tmc_chain_spec (Œª e‚Çõ' v‚Çú, ‚åúe‚Çõ' = e‚Çõ.[Œì.‚Çõ#]‚åù ‚àó ‚åúv‚Çú = l‚Çú‚åù)%I).
        { sim_post. }
        iIntros "%e‚Çõ' %v‚Çú %v‚Çú' (-> & ->) Hchain".
        sim_post. sim_store‚Çú. sim_pures‚Çú.
        rewrite -sim_post_vals_unseal.
        sim_apply (IHC l‚Çú ùüô [] e‚Çú.[#l‚Çú/] with "Hl‚Çú1 [-] [%]").
        { simpl. lia. }
        { eapply tmc_expr_dps_subst; eauto; autosubst. }
        { split; autosubst. }
      + sim_apply sim_block_val‚Çú. iIntros "%l‚Çú Hl‚Çú0 Hl‚Çú1 Hl‚Çú2".
        sim_post. sim_pures‚Çú. rewrite tmc_ctx_fill_subst. asimpl.
        sim_apply (tmc_chain_spec (Œª e‚Çõ' v‚Çú, ‚åúe‚Çõ' = e‚Çõ.[Œì.‚Çõ#]‚åù ‚àó ‚åúv‚Çú = l‚Çú‚åù)%I).
        { sim_post. }
        iIntros "%e‚Çõ' %v‚Çú %v‚Çú' (-> & ->) Hchain".
        sim_post. sim_store‚Çú. sim_pures‚Çú.
        rewrite -sim_post_vals_unseal.
        sim_apply (IHC l‚Çú ùüö [] e‚Çú.[#l‚Çú/] with "Hl‚Çú2 [-] [%]").
        { simpl. lia. }
        { eapply tmc_expr_dps_subst; eauto; autosubst. }
        { split; autosubst. }
  Qed.
  Lemma tmc_expr_dir_spec e‚Çõ e‚Çú :
    tmc_expr_dir_specification e‚Çõ e‚Çú.
  Proof.
    eapply proj1, tmc_expr_spec.
  Qed.
  Lemma tmc_expr_dps_spec dst idx C e‚Çõ e‚Çú :
    tmc_expr_dps_specification dst idx C e‚Çõ e‚Çú.
  Proof.
    move: dst idx C. eapply proj2, tmc_expr_spec.
  Qed.

  Lemma tmc_simv_close Œ¶ e‚Çõ e‚Çú :
    data_program_valid sim_prog‚Çõ ‚Üí
    SIM e‚Çõ ‚â≥ e‚Çú [[ tmc_protocol ]] {{# Œ¶ }} -‚àó
    SIM e‚Çõ ‚â≥ e‚Çú {{# Œ¶ }}.
  Proof.
    intros (Hprog‚Çõ_wf & Hprog‚Çõ_scoped).
    eapply data_program_scoped_tmc in Hprog‚Çõ_scoped as Hprog‚Çú_scoped; last done.
    iApply sim_close_pure_head_step. clear e‚Çõ e‚Çú. iIntros "!> %Œ® %e‚Çõ %e‚Çú [Hprotocol | Hprotocol]".
    - iDestruct "Hprotocol" as "(%func & %annot & %v‚Çõ & %v‚Çú & %Hfunc‚Çõ & (-> & ->) & #Hv & HŒ®)".
      simpl in Hfunc‚Çõ. apply lookup_lookup_total_dom in Hfunc‚Çõ.
      set def‚Çõ := _ !!! _ in Hfunc‚Çõ. set e‚Çõ := def‚Çõ.(data_definition_body).
      edestruct tmc.(tmc_dir) as (e‚Çú & Hdir & Hfunc‚Çú); first done.
      iExists _, _. iSplit; first eauto 10 with data_lang. sim_asimpl.
      erewrite (subst_data_program_scoped' ids inhabitant.‚Çõ# _ sim_prog‚Çõ); [| done..].
      erewrite (subst_data_program_scoped' ids inhabitant.‚Çú# _ sim_prog‚Çú); [| done..].
      iDestruct (tmc_expr_dir_spec $! tmc_expr_dir_post with "[//] [] [//] []") as "Hsim"; eauto.
      + iApply (bisubst_cons_well_formed with "Hv").
        iApply bisubst_inhabitant_well_formed.
      + rewrite -bisubst_cons‚Çõ -bisubst_cons‚Çú.
        sim_mono "Hsim". rewrite sim_post_vals_unseal. iSmash.
    - iDestruct "Hprotocol" as "(%func & %annot & %v‚Çõ & %func_dps & %l1 & %l2 & %dst & %idx & %v‚Çú & (%Hfunc‚Çõ & %HŒæ) & (-> & ->) & Hl11 & Hl12 & Hl21 & Hl22 & Hdst & #Hv & HŒ®)".
      simpl in Hfunc‚Çõ. apply lookup_lookup_total_dom in Hfunc‚Çõ.
      set def‚Çõ := _ !!! _ in Hfunc‚Çõ. set e‚Çõ := def‚Çõ.(data_definition_body).
      edestruct tmc.(tmc_dps) as (e‚Çú & Hdps & Hfunc_dps‚Çú); [done.. |].
      iExists _, _. iSplit; first eauto 10 with data_lang. sim_asimpl.
      do 4 sim_load‚Çú. sim_pures.
      eapply (tmc_expr_dps_subst _ (ids 0 .: #dst .: #idx .: ren (+1))) in Hdps; [| autosubst..].
      erewrite (subst_data_program_scoped' _ (ren (+1)) _ sim_prog‚Çõ) in Hdps; [| done..]. asimpl in Hdps.
      replace e‚Çú.[#v‚Çú, #dst, #idx, #l2, #l1/] with e‚Çú.[ids 0 .: #dst .: #idx .: ren (+1)].[#v‚Çú, #l2, #l1/] by autosubst.
      erewrite (subst_data_program_scoped' ids inhabitant.‚Çõ# _ sim_prog‚Çõ); [| done..].
      erewrite (subst_data_expr_scoped_1' (#l2 .: #l1 .: ids) inhabitant.‚Çú#); last first.
      { eapply data_expr_scoped_tmc_expr_dps; naive_solver. }
      iDestruct (tmc_expr_dps_spec dst idx [] $! (tmc_expr_dps_post dst idx []) with "Hdst [] [//] []") as "Hsim"; eauto.
      + iApply (bisubst_cons_well_formed with "Hv").
        iApply bisubst_inhabitant_well_formed.
      + rewrite -bisubst_cons‚Çõ -bisubst_cons‚Çú. asimpl.
        sim_mono "Hsim". rewrite sim_post_vals_unseal. iSmash.
  Qed.
End sim_GS.

Lemma tmc_sound prog‚Çõ prog‚Çú :
  data_program_valid prog‚Çõ ‚Üí
  tmc prog‚Çõ prog‚Çú ‚Üí
  data_program_refinement prog‚Çõ prog‚Çú.
Proof.
  intros Hwf Htmc.
  pose sim_programs := Build_SimPrograms prog‚Çõ prog‚Çú.
  apply: sim_adequacy => sim_GS func def‚Çõ v‚Çõ v‚Çú Hlookup Hv‚Çõ Hv.
  iApply (tmc_simv_close (sim_programs := sim_programs) Htmc); first done.
  iApply (sim_apply_protocol (sim_post_vals (‚âà)%I)). iIntros "%œÉ‚Çõ %œÉ‚Çú $ !>".
  iSplitL.
  - iLeft. iExists func, [], v‚Çõ, v‚Çú. repeat iSplit; try iSmash.
    + iPureIntro. simpl. eapply elem_of_dom_2. done.
    + iApply data_val_similar_bi_similar; done.
    + rewrite sim_post_vals_unseal /sim_post_vals'. iSmash.
  - iIntros "%e‚Çõ %e‚Çú Hsimilar".
    rewrite sim_post_vals_unseal. sim_post.
Qed.
