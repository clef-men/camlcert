From simuliris Require Import
  prelude.
From simuliris.common Require Import
  tactics.
From simuliris.language Require Export
  syntax.
From simuliris.language Require Import
  notations.

Implicit Types func func_dps : function.
Implicit Types v v‚Çõ v‚Çú : val.
Implicit Types e e‚Çõ e‚Çú : expr.
Implicit Types prog prog‚Çõ prog‚Çú : program.
Implicit Types Œæ : gmap function function.

Inductive tmc_dir Œæ : expr ‚Üí expr ‚Üí Prop :=
  | tmc_dir_val v :
      tmc_dir Œæ
        #v
        #v
  | tmc_dir_var x :
      tmc_dir Œæ
        $x
        $x
  | tmc_dir_let e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (let: e‚Çõ1 in e‚Çõ2)
        (let: e‚Çú1 in e‚Çú2)
  | tmc_dir_call e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (e‚Çõ1 e‚Çõ2)
        (e‚Çú1 e‚Çú2)
  | tmc_dir_unop op e‚Çõ e‚Çú :
      tmc_dir Œæ e‚Çõ e‚Çú ‚Üí
      tmc_dir Œæ
        (Unop op e‚Çõ)
        (Unop op e‚Çú)
  | tmc_dir_binop op e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (Binop op e‚Çõ1 e‚Çõ2)
        (Binop op e‚Çú1 e‚Çú2)
  | tmc_dir_if e‚Çõ0 e‚Çõ1 e‚Çõ2 e‚Çú0 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ0 e‚Çú0 ‚Üí
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (if: e‚Çõ0 then e‚Çõ1 else e‚Çõ2)
        (if: e‚Çú0 then e‚Çú1 else e‚Çú2)
  | tmc_dir_constr constr e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (&constr e‚Çõ1 e‚Çõ2)
        (&constr e‚Çú1 e‚Çú2)
  | tmc_dir_constr_dps_1 constr e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dps Œæ $0 ùüö e‚Çõ2.[ren (+1)] e‚Çú2 ‚Üí
      tmc_dir Œæ
        (&constr e‚Çõ1 e‚Çõ2)
        (let: &constr e‚Çú1 #() in e‚Çú2 ;; $0)
  | tmc_dir_constr_dps_2 constr e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dps Œæ $0 ùüô e‚Çõ1.[ren (+1)] e‚Çú1 ‚Üí
      tmc_dir Œæ
        (&constr e‚Çõ1 e‚Çõ2)
        (let: &constr #() e‚Çú2 in e‚Çú1 ;; $0)
  | tmc_dir_constr_det constr e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (&&constr e‚Çõ1 e‚Çõ2)
        (&&constr e‚Çú1 e‚Çú2)
  | tmc_dir_load e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ
        (![e‚Çõ2] e‚Çõ1)
        (![e‚Çú2] e‚Çú1)
  | tmc_dir_store e‚Çõ1 e‚Çõ2 e‚Çõ3 e‚Çú1 e‚Çú2 e‚Çú3 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dir Œæ e‚Çõ3 e‚Çú3 ‚Üí
      tmc_dir Œæ
        (e‚Çõ1 <-[e‚Çõ2]- e‚Çõ3)
        (e‚Çú1 <-[e‚Çú2]- e‚Çú3)
with tmc_dps Œæ : expr ‚Üí expr ‚Üí expr ‚Üí expr ‚Üí Prop :=
  | tmc_dps_base dst idx e‚Çõ e‚Çú :
      tmc_dir Œæ e‚Çõ e‚Çú ‚Üí
      tmc_dps Œæ dst idx
        e‚Çõ
        (dst <-[idx]- e‚Çú)
  | tmc_dps_let dst idx e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dps Œæ dst.[ren (+1)] idx.[ren (+1)] e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dps Œæ dst idx
        (let: e‚Çõ1 in e‚Çõ2)
        (let: e‚Çú1 in e‚Çú2)
  | tmc_dps_call dst idx func func_dps e‚Çõ e‚Çú e‚Çú' :
      Œæ !! func = Some func_dps ‚Üí
      tmc_dir Œæ e‚Çõ e‚Çú ‚Üí
      e‚Çú' = (let: e‚Çú in func_dps (dst.[ren (+1)], idx.[ren (+1)], $0))%E ‚Üí
      tmc_dps Œæ dst idx
        (func e‚Çõ)
        e‚Çú'
  | tmc_dps_if dst idx e‚Çõ0 e‚Çõ1 e‚Çõ2 e‚Çú0 e‚Çú1 e‚Çú2 :
      tmc_dir Œæ e‚Çõ0 e‚Çú0 ‚Üí
      tmc_dps Œæ dst idx e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dps Œæ dst idx e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dps Œæ dst idx
        (if: e‚Çõ0 then e‚Çõ1 else e‚Çõ2)
        (if: e‚Çú0 then e‚Çú1 else e‚Çú2)
  | tmc_dps_constr_1 dst idx constr e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 e‚Çú :
      tmc_dir Œæ e‚Çõ1 e‚Çú1 ‚Üí
      tmc_dps Œæ $0 ùüö e‚Çõ2.[ren (+1)] e‚Çú2 ‚Üí
      e‚Çú = (let: &constr e‚Çú1 #() in dst.[ren (+1)] <-[idx.[ren (+1)]]- $0 ;; e‚Çú2)%E ‚Üí
      tmc_dps Œæ dst idx
        (&constr e‚Çõ1 e‚Çõ2)
        e‚Çú
  | tmc_dps_constr_2 dst idx constr e‚Çõ1 e‚Çõ2 e‚Çú1 e‚Çú2 e‚Çú :
      tmc_dir Œæ e‚Çõ2 e‚Çú2 ‚Üí
      tmc_dps Œæ $0 ùüô e‚Çõ1.[ren (+1)] e‚Çú1 ‚Üí
      e‚Çú = (let: &constr #() e‚Çú2 in dst.[ren (+1)] <-[idx.[ren (+1)]]- $0 ;; e‚Çú1)%E ‚Üí
      tmc_dps Œæ dst idx
        (&constr e‚Çõ1 e‚Çõ2)
        e‚Çú.

Scheme tmc_dir_dps_ind := Minimality for tmc_dir Sort Prop
with tmc_dps_dir_ind := Minimality for tmc_dps Sort Prop.
Combined Scheme tmc_ind from tmc_dir_dps_ind, tmc_dps_dir_ind.

Create HintDb tmc.

#[export] Hint Constructors tmc_dir : tmc.
#[export] Hint Constructors tmc_dps : tmc.

Lemma tmc_dir_refl Œæ e :
  tmc_dir Œæ e e.
Proof.
  induction e; eauto with tmc.
Qed.
#[export] Hint Resolve tmc_dir_refl : tmc.

Lemma tmc_subst Œæ :
  ( ‚àÄ e‚Çõ e‚Çú,
    tmc_dir Œæ e‚Çõ e‚Çú ‚Üí
    ‚àÄ e‚Çõ' e‚Çú' œÇ,
    e‚Çõ' = e‚Çõ.[œÇ] ‚Üí
    e‚Çú' = e‚Çú.[œÇ] ‚Üí
    tmc_dir Œæ e‚Çõ' e‚Çú'
  ) ‚àß (
    ‚àÄ dst idx e‚Çõ e‚Çú,
    tmc_dps Œæ dst idx e‚Çõ e‚Çú ‚Üí
    ‚àÄ dst' idx' e‚Çõ' e‚Çú' œÇ,
    dst' = dst.[œÇ] ‚Üí
    idx' = idx.[œÇ] ‚Üí
    e‚Çõ' = e‚Çõ.[œÇ] ‚Üí
    e‚Çú' = e‚Çú.[œÇ] ‚Üí
    tmc_dps Œæ dst' idx' e‚Çõ' e‚Çú'
  ).
Proof.
  apply tmc_ind; solve
  [ intros; simplify; eauto with tmc
  | intros * ? ? ? IHdps **; simplify;
    econstructor; try naive_solver; try eapply IHdps with (up œÇ); autosubst
  ].
Qed.
Lemma tmc_dir_subst Œæ œÇ e‚Çõ e‚Çõ' e‚Çú e‚Çú' :
  tmc_dir Œæ e‚Çõ e‚Çú ‚Üí
  e‚Çõ' = e‚Çõ.[œÇ] ‚Üí
  e‚Çú' = e‚Çú.[œÇ] ‚Üí
  tmc_dir Œæ e‚Çõ' e‚Çú'.
Proof.
  eauto using (proj1 (tmc_subst Œæ)).
Qed.
Lemma tmc_dps_subst Œæ œÇ dst dst' idx idx' e‚Çõ e‚Çõ' e‚Çú e‚Çú' :
  tmc_dps Œæ dst idx e‚Çõ e‚Çú ‚Üí
  dst' = dst.[œÇ] ‚Üí
  idx' = idx.[œÇ] ‚Üí
  e‚Çõ' = e‚Çõ.[œÇ] ‚Üí
  e‚Çú' = e‚Çú.[œÇ] ‚Üí
  tmc_dps Œæ dst' idx' e‚Çõ' e‚Çú'.
Proof.
  eauto using (proj2 (tmc_subst Œæ)).
Qed.

Record tmc {prog‚Çõ prog‚Çú} := {
  tmc_Œæ : gmap function function ;

  tmc_Œæ_fresh :
    map_Forall (Œª _ func_dps, func_dps ‚àâ dom prog‚Çõ) tmc_Œæ ;
  tmc_Œæ_inj func1 func2 func_dps :
    tmc_Œæ !! func1 = Some func_dps ‚Üí
    tmc_Œæ !! func2 = Some func_dps ‚Üí
    func1 = func2 ;

  tmc_dirs func e‚Çõ :
    prog‚Çõ !! func = Some e‚Çõ ‚Üí
      ‚àÉ e‚Çú,
      prog‚Çú !! func = Some e‚Çú ‚àß
      tmc_dir tmc_Œæ e‚Çõ e‚Çú ;

  tmc_dpss func func_dps e‚Çõ :
    prog‚Çõ !! func = Some e‚Çõ ‚Üí
    tmc_Œæ !! func = Some func_dps ‚Üí
      ‚àÉ e‚Çú,
      prog‚Çú !! func_dps = Some (let: ![ùüô] $0 in let: ![ùüö] $0 in let: ![ùüô] $1 in let: ![ùüö] $3 in e‚Çú)%E ‚àß
      tmc_dps tmc_Œæ $1 $2 e‚Çõ e‚Çú ;
}.
#[global] Arguments tmc : clear implicits.
